PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725892483536767471928937547976945179157127174382952885226404012768969982874131094037295125084073131250940555079745969773800062437914340176199305563981905110719172412566465655952258294304273875390576857887934738722195191314697031919389352008278488088693906872457297595577109657336368136908347988312190698329933873441658469559282163917691927993074344215484339831947824050389300195009738414460063932901522590172745586559998014273079968875215702193115175533715262139007718937215953273381645536787659347075892390430779289059481513904084929520623102504779160529948190008478056515127498861407172134973608870317302058261482874733333715612063903913444997293964391246139452939575362403444137832336332830657039027095858714745427711817218581249169810135163338043317653674477313081887109908767039455958518093621513891697288556886218631414097359374451823719369208951122999942713593361996279197670905618494315493844890212935045229988856813692522854404508547869898801992705763951026141195746979374274296963582229822824959307465929309200969182422480678284377038433036545219231736997447964846875619599073483601956786529449732374863532270093623787433297313968089776877895594097554855925232809282524827366749366451694064985090477653439805426509621033830875633287776399872749790392905644043410711402959679481286165989936776308526014810430785312444749353376644499250590328309028766072859046625764995719622252206247738726252486981623354250999725360808574275993900138605574304559395130999849902670034572333674939194165683360912898767997803921227448305908742671867040234516605613548261608023095459783980961564280234217468068029884525501533312359207348017577996397505057506410993732871326013173186563868817889718430821760298946579004368778697616537702286564129839088377216422328101423428887514296711158368298098090680852469203884127103239333242233629786774788349148820997998038882980091634767813204568037748637721753516668017471493397178732552688558820985611353398393610682797865864396826096156298546407426514450051219621537816852847474457070932983415930080376376710734513835894656699082060159305489355971329607145208072857104410839595993261785837328487178034414549247164395006507136960130510183671442567693444068045786033982444281739221730161017060017027668006453175515209614816960493718409397338810482876096317597043242991291339621419650119602416974689240581144846799058895647806951643282695939691863152749319771545969869187273495425537426012390491842644263041204079122688229768793237651051554166068942968160740864749499000598501607885049337551514625540977303815035150718374509263014091598305596542058627615003188380673758677808482208955455506329639519738082218158734018380929850596308

def next_lexicographical_permutation_num(n: int) -> int:
    s = list(str(n))
    for i in range(len(s) - 2, -1, -1):
        if s[i] < s[i + 1]:
            t = s[i:]
            m = min(filter(lambda x: x > t[0], t))
            t.remove(m)
            t.sort()
            s[i:] = [m] + t
            return int("".join(s))
    return -1

def last_lexicographical_permutation_num(n):
    s = list(str(n))
    print(n)
    for i in range(len(s) - 2, -1, -1):
        if s[i] > s[i + 1]:
            t = s[i:]
            m = max(filter(lambda x: x < t[0], t))
            t.remove(m)
            t.sort(reverse=True)
            s[i:] = [m] + t
            result = int("".join(s))
            return result if result < n and s[0] != "0" else -1
    return -1

def sqrt(value: float | int, pow=2) -> float | int:
    if pow == 2:
        # If the default is square root
        return value ** 0.5
    else:
        # Return the value raised to the specified power
        return value ** (1 / pow)

def distance_formula(q1: tuple[float | int], q2: tuple[float | int]) -> float | int:
    return abs(sqrt(((q2[0] - q1[0]) ** 2) + (q2[1] - q1[1]) ** 2))

# Lowest common multiplier
def lcm(a, b):
    return abs(a * b) // Fraction.gcd(a, b)
    
# Greatest common denominator
def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

